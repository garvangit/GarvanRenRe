An event represents a natural catastrophe and has the following attributes:
- an id
- peril (1 = hurricane, 2 = earthquake, 3 = flood)
- region (1 = California, 2 = Louisiana, 3 = Florida)
- loss from the event

Alongside this text file, you'll find Microsoft Visual C# 2010 Express solution with a Data class that provides an unstructured list of event data in the form:

id		peril	zone	loss
1		2		1		1000
2		3		2		500
3		3		3		750
4		1		3		2000

A deal is insurance cover that we have sold to protect a client from these events and has the following attributes:
- a retention
- a limit 
- a list of the perils that it covers
- a list of the regions that it covers

The retention is the portion of the loss the client retains (similar to the excess on your car insurance policy) and the limit caps the maximum losses we are liable for. 100 of retention with 500 of limit is expressed as 500x100 (500 “in eXcess of” 100). 

Imagine an reinsurance company that has bought into the following deals:
- Deal 1 covers California earthquake, and is 500x100
- Deal 2 covers Florida hurricane, and is 3000x1000
- Deal 3 covers Florida and Louisiana for both hurricane and flood and is 250x250

Write a program that calculates the reinsurance company's losses for each event. The expected answers are:
- Event 1 only affects deal 1 and the reinsurance company's loss is 500
- Event 2 only affects deal 3 and the reinsurance company's loss is 250
- Event 3 only affects deal 3 and the reinsurance company's loss is 250
- Event 4 affects deal 2 and the reinsurance company's loss is 1000
- Event 4 also affects deal 3 and the reinsurance company's loss is 250

Using OO principles, try to create classes that model this domain. Aim for high cohesion when designing your classes.

Please support your solution with unit tests. As a guiding principle, a unit test should test only one method, and should only have one assert.